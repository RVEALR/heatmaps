// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;


namespace UnityAnalyticsHeatmap
{
    public abstract class DataStory
    {
        public static DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);

        public string name = "";
        public string genre = "";
        public string description = "";
        public string whatToTry = "";
        public string sampleCode = "";

        public abstract Dictionary<double, string> Generate();

        public override string ToString()
        {
            string str = "Genre: " + genre + "\n";
            str += "Description: " + description + "\n";
            str += "What to try: " + whatToTry;
            return str;
        }

        protected Vector3 UpdatePosition(ref Vector3 position, ref Vector3 pointOnCircle, float radius, float range)
        {
            pointOnCircle.x = pointOnCircle.x + UnityEngine.Random.Range(0, range);
            float xr = Mathf.Sin(pointOnCircle.x) * radius;
            position.x = xr;

            pointOnCircle.y += UnityEngine.Random.Range(0, range * 2f);
            float yr = Mathf.Sin(pointOnCircle.y) * radius;
            position.y = yr;

            pointOnCircle.z += UnityEngine.Random.Range(0, range * 4f);
            float zr = Mathf.Sin(pointOnCircle.z) * radius;
            position.z = zr;

            return position;
        }
    }

    public class BasicDataStory : DataStory
    {
        public BasicDataStory()
        {
            name = "Basic Functionality";
            genre = "Any";
            description = "This first demo shows off a few key ideas, such as particle shapes, sizes, and colors.";
            whatToTry = "Generate this data, then open the Heatmapper, ensure that 'Local Only' is checked, and click the Process button. ";
            whatToTry += "First, notice the numbers at the bottom of the Heatmapper ('Points in current set' and ";
            whatToTry += "'Points currently displayed'). These give you an idea of how much data you should expect to see displayed.\n\n";
            whatToTry += "Notice that the generated heatmap has three colors. Play with the color thresholds to 'tune' the ";
            whatToTry += "separation between high-, medium- and low-frequency events. Click on a ";
            whatToTry += "color swatch and play with that color; see how that changes the look of the heatmap. You can even change the alpha.\n\n";
            whatToTry += "Now, under 'Particle', change the size and shape settings and again observe how this affects the display.";
        }

        #region implemented abstract members of DataStory
        public override Dictionary<double, string> Generate()
        {
            var retv = new Dictionary<double, string>();

            int eventCount = 2000;
            int linesPerFile = 500;
            int currentFileLines = 0;
            int deviceCount = 2;

            float radius = 50f;
            float minx = -radius;
            float maxx = radius;
            float miny = -radius;
            float maxy = radius;
            float minz = -radius;
            float maxz = radius;

            double firstDate = 0d;
            DateTime now = DateTime.UtcNow;
            DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
            string data = "";
            string eventName = "Heatmap.ShotWeapon";

            for (int a = 0; a < eventCount; a++)
            {
                string evt = "";

                // Date
                DateTime dt = now.Subtract(new TimeSpan(TimeSpan.TicksPerSecond * (eventCount - a)));
                string dts = dt.ToString("yyyy-MM-dd hh:mm:ss.ms");
                evt += dts + "\t";
                if (currentFileLines == 0) {
                    firstDate = Math.Round((dt - epoch).TotalSeconds);
                }

                // Device ID & name
                evt += "d" + UnityEngine.Random.Range(0, deviceCount) + "-XXXX-XXXX\t";
                evt += eventName + "\t";

                // Build the JSON
                evt += "{";
                float x = UnityEngine.Random.Range(minx, maxx);
                evt += "\"x\":\"" + x + "\",";
                float y = UnityEngine.Random.Range(miny, maxy);
                evt += "\"y\":\"" + y + "\",";
                float z = UnityEngine.Random.Range(minz, maxz);
                evt += "\"z\":\"" + z + "\",";

                evt += "\"unity.name\":" + "\"" + eventName + "\"" + "}\n";

                data += evt;
                currentFileLines ++;
                if (currentFileLines >= linesPerFile || a == eventCount-1) {
                    retv.Add(firstDate, data);
                    currentFileLines = 0;
                    data = "";
                }
            }
            return retv;
        }
        #endregion
    }

    public class ReallyBigDataStory : DataStory
    {
        public ReallyBigDataStory()
        {
            name = "Really Big Game";
            genre = "3D Flight Combat Sim";
            description = "This demonstrates some important ideas about scale, direction, and time.";
            whatToTry = "Generate this data. Open the Heatmapper and click the Process button, which first shows you combat kills. ";
            whatToTry += "Zoom out so you can see all the points. ";
            whatToTry += "By the time you do this, you may find that the individual data points are hard to see. ";
            whatToTry += "Adjust the particle size and color thresholds as you did in the 'Basic Functionality' demo ";
            whatToTry += "until you can see the points clearly. ";
            whatToTry += "Notice that this data is a bit sparse and overlapping because of the scale of the map. ";
            whatToTry += "Under 'Aggregate', change the value of 'Space Smooth' to 80 and re-process. ";
            whatToTry += "Adjust the particle size to 50. Now you can see the general areas where ";
            whatToTry += "kills have occurred and the map becomes more useful.\n\n";

            whatToTry += "Under Render, Find the 'Option' dropdown. If you click it, you'll see in addition to 'CombatKills' ";
            whatToTry += "there's an option for 'PlayerPosition'. Choose that and instead of seeing kills, you'll see where in this sim ";
            whatToTry += "your players have gone (you might want to re-adjust space smoothing and particle size to 5). ";
            whatToTry += "Uncheck the 'Direction' checkbox and Process again, and again select the 'PlayerPosition' option. ";
            whatToTry += "Now, under Particle 'Shape' pick 'Arrow'. What you're now seeing is not simply WHERE the player went, ";
            whatToTry += "but what direction they flew.\n\n";

            whatToTry += "Under 'Aggregate', uncheck 'Time', then Process again. You may notice that the colors change a bit (it shifts towards green). ";
            whatToTry += "This is because moments of time are no longer aggregated together. In the Render section ";
            whatToTry += "under 'Time' note the 'Start' and 'End' values. Change 'End' to 10, change 'Play Speed' to 0.1 and ";
            whatToTry += "press the 'Play' button to watch the airplanes fly!";
        }

        #region implemented abstract members of DataStory
        public override Dictionary<double, string> Generate()
        {
            var retv = new Dictionary<double, string>();

            int playThroughs = 5;
            int eventCount = 500;
            int linesPerFile = 500;
            int currentFileLines = 0;

            float randomRange = .25f;
            float radius = 1000f;

            double firstDate = 0d;
            DateTime now = DateTime.UtcNow;

            string data = "";
            string[] eventNames = new string[]{ "Heatmap.CombatKills", "Heatmap.PlayerPosition" };

            Vector3 position = Vector3.zero, rotation = Vector3.zero, pointOnCircle = Vector3.zero;
            for (int a = 0; a < playThroughs; a++)
            {
                
                for (int b = 0; b < eventCount; b++)
                {
                    
                    string evt = "";

                    // Date
                    DateTime dt = now.Subtract(new TimeSpan((TimeSpan.TicksPerSecond * (eventCount - b)) + (TimeSpan.TicksPerSecond*(eventCount-a))));
                    string dts = dt.ToString("yyyy-MM-dd hh:mm:ss.ms");
                    evt += dts + "\t";
                    if (currentFileLines == 0) {
                        firstDate = Math.Round((dt - epoch).TotalSeconds);
                    }

                    if (b == 0) {
                        position = Vector3.zero;
                        rotation = Vector3.zero;
                        pointOnCircle = new Vector3(UnityEngine.Random.Range(-radius, radius),
                            UnityEngine.Random.Range(-radius, radius),
                            UnityEngine.Random.Range(-radius, radius));
                    }

                    // Device ID & name
                    evt += "d" + a + "-XXXX-XXXX\t";
                    string eventName = eventNames[0];
                    evt += eventName + "\t";

                    // Build the JSON
                    Vector3 lastPosition = new Vector3(position.x,position.y,position.z);

                    position = UpdatePosition(ref position, ref pointOnCircle, radius, randomRange);
                    rotation = Vector3.RotateTowards(lastPosition, position, 2*Mathf.PI, 0f);



                    evt += "{";
                    evt += "\"x\":\"" + position.x + "\",";
                    evt += "\"y\":\"" + position.y + "\",";
                    evt += "\"z\":\"" + position.z + "\",";


                    evt += "\"t\":\"" + b + "\",";

                    evt += "\"rx\":\"" + rotation.x + "\",";
                    evt += "\"ry\":\"" + rotation.y + "\",";
                    evt += "\"rz\":\"" + rotation.z + "\",";

                    evt += "\"unity.name\":" + "\"" + eventName + "\"" + "}\n";

                    data += evt;
                    currentFileLines ++;
                    if (currentFileLines >= linesPerFile || b == eventCount-1) {
                        retv.Add(firstDate, data);
                        currentFileLines = 0;
                        data = "";
                    }
                }
            }
            return retv;
        }
        #endregion
    }

    public class MultiLevelDataStory : DataStory
    {
        public MultiLevelDataStory()
        {
            name = "Multilevel Game";
            genre = "2D Platformer";
            description = "This demo shows how you can separate events by level. In fact, you can separate by ";
            description += "pretty much ANYTHING.";
            whatToTry = "Generate this data, which shows coin collection in a 2D platformer. Open the Heatmapper and click the Process button. ";
            whatToTry += "Now, there's a LOT of data here and it looks very messy. That's because what you're seeing is actually ";
            whatToTry += "data from MANY levels on top of each other. Click the 'Separate on Field' button and replace the words ";
            whatToTry += "'Field Name' with 'level' (case matters!). Now Process again. Hey presto! You can now see the clear shape ";
            whatToTry += "of a single level. Did you see the 'Option' dropdown appear? Click that dropdown. ";
            whatToTry += "You can now see each level's worth of data individually.\n\n";
            whatToTry += "Under 'Aggregate', uncheck 'Unique Devices' and click Process. Open the 'Option' list to see how it has changed. ";
            whatToTry += "Not only are the levels separated, so are the individual devices. You can use this to see how individual ";
            whatToTry += "players play.";
        }

        #region implemented abstract members of DataStory
        public override Dictionary<double, string> Generate()
        {
            throw new NotImplementedException();
        }
        #endregion
    }

    public class VRLookAtDataStory : DataStory
    {
        public VRLookAtDataStory()
        {
            name = "VR Look At";
            genre = "VR Adventure";
            description = "Imagine this data as part of a VR game. Your question: as they move through the game, ";
            description += "are users looking at what I want them to look at?";
            whatToTry = "Generate this data, then click Process in the Heatmapper. In the render setting under 'Shape', ";
            whatToTry += "pick 'Point to Point'. Observe how you can see not just where the user was in the virtual world, ";
            whatToTry += "but also what they were looking at.";
        }

        #region implemented abstract members of DataStory
        public override Dictionary<double, string> Generate()
        {
            throw new NotImplementedException();
        }
        #endregion
    }

    public class FPSDropoffDataStory : DataStory
    {
        public FPSDropoffDataStory()
        {
            name = "FPS Dropoff";
            genre = "3D Maze Game";
            description = "Imagine this data as part of a maze game. Your question: where in my game does my framerate drop? ";
            description += "We're sending an event called PlayerPosition, about once per second." ;
            description += "By sending 'fps' as a parameter, we can chart it and get an idea of slower areas.";
            whatToTry = "Generate this data. In the Heatmapper, first check 'Remap color to field'. In the textfield ";
            whatToTry += "that appears, enter the value 'fps'. In the 'Render' section, check that your shape is 'Cube' ";
            whatToTry += "or 'Square'. Now click the Process button.";
            whatToTry += "Observe how color now represents the places with higher and lower FPS.";
        }

        #region implemented abstract members of DataStory
        public override Dictionary<double, string> Generate()
        {
            throw new NotImplementedException();
        }
        #endregion
    }
}

